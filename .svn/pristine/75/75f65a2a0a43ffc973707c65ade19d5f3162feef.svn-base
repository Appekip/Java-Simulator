package view;


import java.text.DecimalFormat;  
import controller.*;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import simu.framework.Trace;
import simu.framework.Trace.Level;
import javafx.scene.canvas.Canvas;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.*;
import javafx.scene.Scene;
import javafx.scene.paint.Color;



public class SimulaattorinGUI extends Application implements ISimulaattorinUI{

	//Kontrollerin esittely (tarvitaan käyttöliittymässä)
	private IKontrolleri kontrolleri;

	// Käyttöliittymäkomponentit:
	private TextField aika;
	private Label aika1;
	private TextField viive;
	private Label viive1;
	private TextField tulos;
	private TextArea console;
	private Button kaynnistaButton;
	private Button hidastaButton;
	private Button nopeutaButton;
	private CheckBox CheckBox;
	private CheckBox CheckBox1;
	private CheckBox CheckBox2;
	private Button clear;
	private Button Save;
	
	private final Border border = new Border( new BorderStroke( Color.BLACK, BorderStrokeStyle.SOLID,new CornerRadii (5.0),new BorderWidths(2)  ) );
		
	private IVisualisointi naytto;
	//private IVisualisointi naytto1;


	@Override
	public void init(){
		
		Trace.setTraceLevel(Level.INFO);
		
		kontrolleri = new Kontrolleri(this);
	}


	@Override
	public void start(Stage primaryStage) {
		// Käyttöliittymän rakentaminen
		try {
			
			primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>() {
			    @Override
			    public void handle(WindowEvent t) {
			        Platform.exit();
			        System.exit(0);			        
			    }
			});
						
			
			primaryStage.setTitle("Simulaattori");			
			kaynnistaButton = new Button();
			kaynnistaButton.setText("Käynnistä simulointi");
			kaynnistaButton.setBackground(new Background(new BackgroundFill(Color.LAWNGREEN,new CornerRadii (7.0), new Insets(0, 0, 0, 0))));
			kaynnistaButton.setBorder(border);
			kaynnistaButton.setTextFill(Color.BLACK);
			kaynnistaButton.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	                kontrolleri.kaynnistaSimulointi();
	            }
	        });
			
			
			console = new TextArea("");
			console.setFont(Font.font("Tahoma", FontWeight.NORMAL, 12));
			console.setPrefWidth(150);
			console.setPrefHeight(150);
			//console.setText(text);
			console.setBackground(new Background(new BackgroundFill(Color.LAWNGREEN,new CornerRadii (9.0), new Insets(10, 10, 10, 10))));
			console.setBorder(border);					   
			   			
			
			CheckBox1 = new CheckBox();
			CheckBox1.setText("Varasto 2");
			CheckBox1.setFont(Font.font("Tahoma", FontWeight.NORMAL, 15));
			//CheckBox1.setOnAction(e -> kontrolleri.hidasta());
			CheckBox1.setTextFill(Color.LAWNGREEN);
			
						
			CheckBox = new CheckBox();
			CheckBox.setText("Kassa 3");
			CheckBox.setFont(Font.font("Tahoma", FontWeight.NORMAL, 15));
			//CheckBox.setOnAction(e -> kontrolleri.hidasta());
			CheckBox.setTextFill(Color.LAWNGREEN);
			
			CheckBox2 = new CheckBox();
			CheckBox2.setText("Kassa 2");
			CheckBox2.setFont(Font.font("Tahoma", FontWeight.NORMAL, 15));
			//CheckBox.setOnAction(e -> kontrolleri.hidasta());
			CheckBox2.setTextFill(Color.LAWNGREEN);
			

			hidastaButton = new Button();
			hidastaButton.setText("Hidasta");
			hidastaButton.setOnAction(e -> kontrolleri.hidasta());
			hidastaButton.setBackground(new Background(new BackgroundFill(Color.LAWNGREEN,new CornerRadii (7.0), new Insets(0, 0, 0, 0))));
			hidastaButton.setBorder(border);

			nopeutaButton = new Button();
			nopeutaButton.setText("Nopeuta");
			nopeutaButton.setOnAction(e -> kontrolleri.nopeuta());
			nopeutaButton.setBackground(new Background(new BackgroundFill(Color.LAWNGREEN,new CornerRadii (7.0), new Insets(0, 0, 0, 0))));
			nopeutaButton.setBorder(border);
			
			Save = new Button();
			Save.setText("Save");
			Save.setOnAction(e -> kontrolleri.hidasta());
			Save.setBackground(new Background(new BackgroundFill(Color.LAWNGREEN,new CornerRadii (7.0), new Insets(0, 0, 0, 0))));
			Save.setBorder(border);
			
			clear = new Button();
			clear.setText("Clear");
			clear.setOnAction(e -> kontrolleri.hidasta());
			clear.setBackground(new Background(new BackgroundFill(Color.LAWNGREEN,new CornerRadii (7.0), new Insets(0, 0, 0, 0))));
			clear.setBorder(border);
			clear.setOnAction(new EventHandler<ActionEvent>() {
	            @Override
	            public void handle(ActionEvent event) {
	                setTextArea("");
	            }
	        });
				    	        	      
	        aika = new TextField("8000");
	        aika.setFont(Font.font("Tahoma", FontWeight.NORMAL, 14));
	        aika.setPrefWidth(150);
	        aika.setBorder(border);	        	        		
	        aika.setBackground(new Background(new BackgroundFill(Color.WHITE,new CornerRadii (7.0), new Insets(0, 0, 0, 0))));
	        
	        
	        aika1 = new Label("Simulointiaika");
	        aika1.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
	        aika1.setTextFill(Color.LAWNGREEN);
	        aika1.underlineProperty();
	        
	        viive1 = new Label("Viive");
	        viive1.setFont(Font.font("Tahoma", FontWeight.NORMAL, 20));
	        viive1.setTextFill(Color.LAWNGREEN);
	        viive1.underlineProperty();

	        viive = new TextField("10");
	        viive.setFont(Font.font("Tahoma", FontWeight.NORMAL, 14));
	        viive.setPrefWidth(150);
	        viive.setBorder(border);
	        viive.setBackground(new Background(new BackgroundFill(Color.WHITE,new CornerRadii (7.0), new Insets(0, 0, 0, 0))));
	                	        
	       // tulos = new TextField("SSS");
	      //  tulos.setFont(Font.font("Tahoma", FontWeight.NORMAL, 15));
	     //   tulos.setPrefWidth(150);
	     //   tulos.setBorder(border);
	     //  tulos.setBackground(new Background(new BackgroundFill(Color.WHITE,new CornerRadii (7.0), new Insets(0, 0, 0, 0))));

	        HBox hBox = new HBox();
	        hBox.setPadding(new Insets(15, 15, 15, 12)); // marginaalit ylä, oikea, ala, vasen
	        hBox.setSpacing(10);   // noodien välimatka 10 pikseliä
	        hBox.setBackground(new Background(new BackgroundFill(Color.ROYALBLUE, CornerRadii.EMPTY, new Insets(-20, -20, -20, -40))));
	    
	        
	        GridPane grid = new GridPane();
	        grid.setAlignment(Pos.TOP_CENTER);
	        grid.setVgap(10);
	        grid.setHgap(10);	        	           
	        grid.add(aika, 0, 1);
	        grid.add(viive1, 1, 0);// sarake, rivi
	        grid.add(viive, 1, 1);               // sarake, rivi
	        grid.add(kaynnistaButton,0, 2);     // sarake, rivi
	        grid.add(CheckBox2, 1, 2);            // sarake, rivi
	        grid.add(nopeutaButton, 0, 3);               // sarake, rivi
	       grid.add(hidastaButton, 0, 4);  
	        grid.add(CheckBox, 1, 3);// sarake, rivi
	        grid.add(CheckBox1, 1, 4);	        	        
	        grid.add(console, 0, 6, 2, 6);
	        grid.add(aika1, 0, 0);
	        grid.add(Save, 1, 5);
	        grid.add(clear, 0, 5);
	        
	        naytto = new Visualisointi2(350,390);
	        	        
	        grid.setBackground(
	    			new Background(new BackgroundFill(Color.DARKBLUE, CornerRadii.EMPTY, new Insets(-20, -20, -20, -40))));
	      //  naytto1 = new Visualisointi(600, 400);

	        // Täytetään boxi:
	        hBox.getChildren().addAll(grid, (Canvas)naytto);
	        
	        Scene scene = new Scene(hBox);
	        primaryStage.setScene(scene);
	        primaryStage.show();
	        
	        

	        
	        



		} catch(Exception e) {
			e.printStackTrace();
		}
	}


	//Käyttöliittymän rajapintametodit (kutsutaan kontrollerista)

	@Override
	public double getAika(){
		return Double.parseDouble(aika.getText());
	}

	@Override
	public long getViive(){
		return Long.parseLong(viive.getText());
	}

	@Override
	public void setLoppuaika(double aika){
		 DecimalFormat formatter = new DecimalFormat("#0.00");
		 this.tulos.setText(formatter.format(aika));
	}


	@Override
	public IVisualisointi getVisualisointi() {
		 return naytto ;
		 
	}
	
	public void setTextArea(String s) {
		console.setText(s);
	}
	
	
	
	// JavaFX-sovelluksen (käyttöliittymän) käynnistäminen

	public static void main(String[] args) {
		launch(args);
	}
	
}
