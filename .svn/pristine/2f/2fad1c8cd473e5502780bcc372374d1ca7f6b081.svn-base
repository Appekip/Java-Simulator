package simu.model;

import controller.IKontrolleri;
import eduni.distributions.Negexp;
import eduni.distributions.Normal;
import simu.framework.Kello;
import simu.framework.Moottori;
import simu.framework.Saapumisprosessi;
import simu.framework.Tapahtuma;
import simu.framework.Trace;
import controller.Kontrolleri;
import simu.framework.IMoottori;


public class OmaMoottori extends Moottori{
	
	private Saapumisprosessi saapumisprosessi;
	
	private Kontrolleri kontrolleri;
	
	private double asiakasMaara = 0;
	private double konversioMaara = 0;
	private double varastoCount = 0;
	private double kassaCount = 0;
	private double hyllyCount = 0;
	private double TechPisteCount = 0;
	private double TelePisteCount = 0;
	private double KodinkonePisteCount = 0;
	private double AWPisteCount = 0;
	private double poistuneet = 0;
	
	public OmaMoottori(IKontrolleri kontrolleri){ // UUSI

		super(kontrolleri); //UUSI
		
		palvelupisteet = new Palvelupiste[8];
	
		
		palvelupisteet[0]=new Palvelupiste(new Normal(10,6), tapahtumalista, TapahtumanTyyppi.HYLLY);
		palvelupisteet[1]=new Palvelupiste(new Normal(5,3), tapahtumalista, TapahtumanTyyppi.TELEPISTE1);
		palvelupisteet[2]=new Palvelupiste(new Normal(10,10), tapahtumalista, TapahtumanTyyppi.KODINKONEPISTE1);
		palvelupisteet[3]=new Palvelupiste(new Normal(5,3), tapahtumalista, TapahtumanTyyppi.AWPISTE1);
		palvelupisteet[4]=new Palvelupiste(new Normal(5,3), tapahtumalista, TapahtumanTyyppi.TECHPISTE1);
		palvelupisteet[5]=new Palvelupiste(new Normal(5,3), tapahtumalista, TapahtumanTyyppi.KASSA);
		palvelupisteet[6]=new Palvelupiste(new Normal(5,3), tapahtumalista, TapahtumanTyyppi.VARASTO);
		palvelupisteet[7]=new Palvelupiste(new Normal(5,3), tapahtumalista, TapahtumanTyyppi.POISTUMINEN);
		
		
		saapumisprosessi = new Saapumisprosessi(new Negexp(15,5), tapahtumalista, TapahtumanTyyppi.SAAPUMINEN);

	}

	
	@Override
	protected void alustukset() {
		saapumisprosessi.generoiSeuraava(); // Ensimmäinen saapuminen järjestelmään
	}
	
	@Override
	protected void suoritaTapahtuma(Tapahtuma t){  // B-vaiheen tapahtumaa
		Asiakas a;
		switch (t.getTyyppi()){
			case SAAPUMINEN: palvelupisteet[0].lisaaJonoon(new Asiakas());	
				saapumisprosessi.generoiSeuraava();	
		       //kontrolleri.visualisoiAsiakas(); // UUSI
		       break;
		
		
			
			case HYLLY:	a = palvelupisteet[0].otaJonosta();
					asiakasMaara++;
					
					
					switch (a.getTuoteryhma()) {
					
					case 1:
						hyllyCount++;
						if (a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
							palvelupisteet[2].lisaaJonoon(a);
						} 
						else {//Asiakas ei osta, joten poistuu myymälästä
							palvelupisteet[4].lisaaJonoon(a);
						}
						break;
					case 2:
						hyllyCount++;
						if (a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
							palvelupisteet[2].lisaaJonoon(a);
						} 
						else {//Asiakas ei osta, joten poistuu myymälästä
							palvelupisteet[4].lisaaJonoon(a);
						}
						break;
					case 3:
						hyllyCount++;
						if (a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
							palvelupisteet[2].lisaaJonoon(a);
						} 
						else {//Asiakas ei osta, joten poistuu myymälästä
							palvelupisteet[4].lisaaJonoon(a);
						}
						break;
					case 4:
						hyllyCount++;
						if (a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
							palvelupisteet[2].lisaaJonoon(a);
						} 
						else {//Asiakas ei osta, joten poistuu myymälästä
							palvelupisteet[4].lisaaJonoon(a);
						}
						break;
					case 5:
						hyllyCount++;
						if (a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
							palvelupisteet[2].lisaaJonoon(a);
						} 
						else {//Asiakas ei osta, joten poistuu myymälästä
							palvelupisteet[4].lisaaJonoon(a);
						}
						break;
						
					case 6://Tuoteryhmä on 6, joten asiakas siirtyy puhelinpisteen jonoon
							palvelupisteet[1].lisaaJonoon(a);
						break;
						
					case 7://Tuoteryhmä on 7, joten asiakas siirtyy tehcpisteen jonoon
							palvelupisteet[4].lisaaJonoon(a);
						break;
						
					case 8://Tuoteryhmä on 7, joten asiakas siirtyy awpisteen jonoon
							palvelupisteet[3].lisaaJonoon(a);
						break;
						
					case 9://Tuoteryhmä on 9, joten asiakas siirtyy kodinkonepisteen jonoon
							palvelupisteet[2].lisaaJonoon(a);	
						break;
				
				}
					
			break;
			
			case TELEPISTE1: a = palvelupisteet[1].otaJonosta();
				TelePisteCount++;
				if(a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
					palvelupisteet[5].lisaaJonoon(a); 
				}
				else {//Asiakas ei osta, joten poistuu myymälästä
					palvelupisteet[7].lisaaJonoon(a);
				}
				break;
				
			case AWPISTE1: a = palvelupisteet[3].otaJonosta();
				AWPisteCount++;
				if(a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
					palvelupisteet[5].lisaaJonoon(a); 
				}
				else {//Asiakas ei osta, joten poistuu myymälästä
					palvelupisteet[7].lisaaJonoon(a);
				}
				break;
				
			case KODINKONEPISTE1: a = palvelupisteet[2].otaJonosta();
				KodinkonePisteCount++;
				if(a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
					palvelupisteet[5].lisaaJonoon(a); 
				}
				else {//Asiakas ei osta, joten poistuu myymälästä
					palvelupisteet[7].lisaaJonoon(a);
				}
				break;
				
			case TECHPISTE1: a = palvelupisteet[4].otaJonosta();
				TechPisteCount++;	
				if(a.getKonversio() < 6) {//Tarkistetaan ostaako asiakas
					palvelupisteet[5].lisaaJonoon(a); 
				}
				else {//Asiakas ei osta, joten poistuu myymälästä
					palvelupisteet[7].lisaaJonoon(a);
				}
				break;
			
			case KASSA:		  a = palvelupisteet[5].otaJonosta();
								kassaCount++;
								konversioMaara++;
							if (a.getTuoteryhma() < 6) {//Tarkistetaan tuote 
								palvelupisteet[7].lisaaJonoon(a);//Asiakkaan ei tarvitse mennä varastoon, joten poistuu oston jälkeen
							}
							else {
								palvelupisteet[6].lisaaJonoon(a);//Asiakas menee varastolle noutamaan tuotetta
							}
							
							
			break;
			
			case VARASTO:     a = palvelupisteet[6].otaJonosta();
			      		  palvelupisteet[7].lisaaJonoon(a); 
			      		  varastoCount++;
			break;
			
			case POISTUMINEN: a = palvelupisteet[7].otaJonosta();
					  a.setPoistumisaika(Kello.getInstance().getAika());
					  poistuneet++;

			}
	}

	
	@Override
	public void tulokset() {
		
		System.out.println("Asiakkaita oli " + asiakasMaara + " Ostaneita oli " + konversioMaara + ". Konversio prosentti oli: " + konversioMaara/asiakasMaara);
		System.out.println("Hyllyillä oli " + hyllyCount + " asiakasta.");
		System.out.println("Telepisteellä pisteillä oli " + TelePisteCount + " asiakasta.");
		System.out.println("Tech pisteillä oli " + TechPisteCount + " asiakasta.");
		System.out.println("Kodinkone pisteillä oli " + KodinkonePisteCount + " asiakasta.");
		System.out.println("AW pisteillä oli " + AWPisteCount + " asiakasta.");
		System.out.println("Kassalla oli " + kassaCount + " asiakasta.");
		System.out.println("Varastolla oli " + varastoCount + " asiakasta.");
		System.out.println("Myymälästä poistui " + poistuneet + " asiakasta.");
		
		// VANHAA tekstipohjaista
		// System.out.println("Simulointi päättyi kello " + Kello.getInstance().getAika());
		// System.out.println("Tulokset ... puuttuvat vielä");
		
		// UUTTA graafista
		//kontrolleri.naytaLoppuaika(Kello.getInstance().getAika());
		
	}




	
}
